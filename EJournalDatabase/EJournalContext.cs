// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EJournal.Database;

public partial class EJournalContext : DbContext
{
    public EJournalContext()
    {
    }

    public EJournalContext(DbContextOptions<EJournalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<Import> Imports { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<Mark> Marks { get; set; }

    public virtual DbSet<MarkType> MarkTypes { get; set; }

    public virtual DbSet<Specialty> Specialties { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseNpgsql("Persist Security Info=True;Password=admin;Username=postgres;Database=postgres;Host=localhost");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("pg_catalog", "adminpack");

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("accounts_pkey");

            entity.HasOne(d => d.RoleNavigation).WithMany(p => p.Accounts).HasConstraintName("accounts_role_fkey");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("courses_pkey");

            entity.HasOne(d => d.EndMarkNavigation).WithMany(p => p.Courses).HasConstraintName("courses_end_mark_fkey");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("groups_pkey");

            entity.HasOne(d => d.SpecialtyNavigation).WithMany(p => p.Groups).HasConstraintName("groups_specialty_fkey");
        });

        modelBuilder.Entity<Import>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.Year }).HasName("imports_pkey");

            entity.HasOne(d => d.Group).WithMany(p => p.Imports)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("imports_group_id_fkey");
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lessons_pkey");

            entity.HasOne(d => d.Subject).WithMany(p => p.Lessons).HasConstraintName("lessons_subject_id_fkey");
        });

        modelBuilder.Entity<Mark>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.LessonId }).HasName("marks_pkey");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Marks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("marks_lesson_id_fkey");

            entity.HasOne(d => d.Student).WithMany(p => p.Marks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("marks_student_id_fkey");
        });

        modelBuilder.Entity<MarkType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mark_types_pkey");
        });

        modelBuilder.Entity<Specialty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("specialties_pkey");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("students_pkey");

            entity.HasOne(d => d.Group).WithMany(p => p.Students).HasConstraintName("students_group_id_fkey");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("subjects_pkey");

            entity.HasOne(d => d.Course).WithMany(p => p.Subjects).HasConstraintName("subjects_course_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.Subjects).HasConstraintName("subjects_group_id_fkey");

            entity.HasOne(d => d.Teacher).WithMany(p => p.Subjects).HasConstraintName("subjects_teacher_id_fkey");
        });

        modelBuilder.Entity<Teacher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("teachers_pkey");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_roles_pkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}